[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\35845\AppData\Local\Temp\idea1.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\35845\AppData\Local\Temp\idea1.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.4.7 (Oracle Corporation Java 1.8.0_281)
[debug]       Load.loadUnit: plugins took 58.0314ms
[debug]       Load.loadUnit: defsScala took 0.2337ms
[debug] [Loading] Scanning directory C:\Users\35845\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\35845\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(List(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin))), Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 13.7799 ms
[debug]           Load.resolveProject(global-plugins) took 31.2792ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\35845\.sbt\1.0\plugins, plugins: List(<none>))) took 63.5816ms
[debug] [Loading] Done in C:\Users\35845\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 77.1154ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.1748ms
[debug]     Load.loadUnit(file:/C:/Users/35845/.sbt/1.0/plugins/, ...) took 140.4371ms
[debug]   Load.apply: load took 253.3424ms
[debug]   Load.apply: resolveProjects took 4.4643ms
[debug]   Load.apply: finalTransforms took 38.7119ms
[debug]   Load.apply: config.delegates took 6.178ms
[debug]   Load.apply: Def.make(settings)... took 901.3353ms
[debug]   Load.apply: structureIndex took 66.5461ms
[debug]   Load.apply: mkStreams took 1.1272ms
[info] loading global plugins from C:\Users\35845\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 2354.4689ms
[debug]           Load.loadUnit: plugins took 16.1436ms
[debug]           Load.loadUnit: defsScala took 0.0025ms
[debug] [Loading] Scanning directory C:\Users\35845\IdeaProjects\menus\project
[debug]             Load.loadUnit: mkEval took 6.0741ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\35845\IdeaProjects\menus\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(List(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin))), Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 1.5858 ms
[info] loading settings for project menus-build from idea1.sbt ...
[debug]               Load.resolveProject(menus-build) took 2.276ms
[debug]             Load.loadTransitive: finalizeProject(Project(id menus-build, base: C:\Users\35845\IdeaProjects\menus\project, plugins: List(<none>))) took 4.3257ms
[debug] [Loading] Done in C:\Users\35845\IdeaProjects\menus\project, returning: (menus-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 1404.5917ms
[debug]           Load.loadUnit: cleanEvalClasses took 3.0012ms
[debug]         Load.loadUnit(file:/C:/Users/35845/IdeaProjects/menus/project/, ...) took 1424.4926ms
[debug]       Load.apply: load took 1425.4291ms
[debug]       Load.apply: resolveProjects took 0.0782ms
[debug]       Load.apply: finalTransforms took 5.3951ms
[debug]       Load.apply: config.delegates took 0.271ms
[debug]       Load.apply: Def.make(settings)... took 48.9402ms
[debug]       Load.apply: structureIndex took 18.9445ms
[debug]       Load.apply: mkStreams took 0.0019ms
[info] loading project definition from C:\Users\35845\IdeaProjects\menus\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug]     Load.loadUnit: plugins took 2424.3979ms
[debug]     Load.loadUnit: defsScala took 0.0023ms
[debug] [Loading] Scanning directory C:\Users\35845\IdeaProjects\menus
[debug]       Load.loadUnit: mkEval took 0.159ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\35845\IdeaProjects\menus, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(List(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin))), Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin))), Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin)))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 1.1283 ms
[info] loading settings for project menus from build.sbt ...
[debug]         Load.resolveProject(menus) took 20.382ms
[debug]       Load.loadTransitive: finalizeProject(Project(id menus, base: C:\Users\35845\IdeaProjects\menus, plugins: List(<none>))) took 22.314ms
[debug] [Loading] Done in C:\Users\35845\IdeaProjects\menus, returning: (menus)
[debug]     Load.loadUnit: loadedProjectsRaw took 524.1634ms
[debug]     Load.loadUnit: cleanEvalClasses took 5.706ms
[debug]   Load.loadUnit(file:/C:/Users/35845/IdeaProjects/menus/, ...) took 2954.7184ms
[debug] Load.apply: load took 2955.8122ms
[debug] Load.apply: resolveProjects took 0.1067ms
[debug] Load.apply: finalTransforms took 15.9779ms
[debug] Load.apply: config.delegates took 0.223ms
[debug] Load.apply: Def.make(settings)... took 53.2525ms
[debug] Load.apply: structureIndex took 15.8764ms
[debug] Load.apply: mkStreams took 0.0016ms
[info] set current project to menus (in build file:/C:/Users/35845/IdeaProjects/menus/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 51626 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 51626, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to menus (in build file:/C:/Users/35845/IdeaProjects/menus/)
[debug] > Exec(idea-shell, None, None)
