[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\35845\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\35845\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.4.7 (Oracle Corporation Java 1.8.0_281)
[debug]       Load.loadUnit: plugins took 59.7007ms
[debug]       Load.loadUnit: defsScala took 0.232ms
[debug] [Loading] Scanning directory C:\Users\35845\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\35845\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(List(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin))), Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 14.0036 ms
[debug]           Load.resolveProject(global-plugins) took 31.6359ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\35845\.sbt\1.0\plugins, plugins: List(<none>))) took 64.756399ms
[debug] [Loading] Done in C:\Users\35845\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 78.460901ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.174999ms
[debug]     Load.loadUnit(file:/C:/Users/35845/.sbt/1.0/plugins/, ...) took 143.743701ms
[debug]   Load.apply: load took 250.5241ms
[debug]   Load.apply: resolveProjects took 4.8546ms
[debug]   Load.apply: finalTransforms took 47.1731ms
[debug]   Load.apply: config.delegates took 5.4637ms
[debug]   Load.apply: Def.make(settings)... took 1333.6162ms
[debug]   Load.apply: structureIndex took 219.424201ms
[debug]   Load.apply: mkStreams took 1.6745ms
[info] loading global plugins from C:\Users\35845\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 3069.2126ms
[debug]           Load.loadUnit: plugins took 16.0474ms
[debug]           Load.loadUnit: defsScala took 0.0025ms
[debug] [Loading] Scanning directory C:\Users\35845\IdeaProjects\menus\project
[debug]             Load.loadUnit: mkEval took 5.2264ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\35845\IdeaProjects\menus\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(List(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin))), Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 1.1143 ms
[info] loading settings for project menus-build from idea.sbt ...
[debug]               Load.resolveProject(menus-build) took 1.949899ms
[debug]             Load.loadTransitive: finalizeProject(Project(id menus-build, base: C:\Users\35845\IdeaProjects\menus\project, plugins: List(<none>))) took 3.4059ms
[debug] [Loading] Done in C:\Users\35845\IdeaProjects\menus\project, returning: (menus-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 95.3298ms
[debug]           Load.loadUnit: cleanEvalClasses took 2.9067ms
[debug]         Load.loadUnit(file:/C:/Users/35845/IdeaProjects/menus/project/, ...) took 115.0098ms
[debug]       Load.apply: load took 115.8795ms
[debug]       Load.apply: resolveProjects took 0.075ms
[debug]       Load.apply: finalTransforms took 5.3509ms
[debug]       Load.apply: config.delegates took 0.243699ms
[debug]       Load.apply: Def.make(settings)... took 49.4048ms
[debug]       Load.apply: structureIndex took 16.399099ms
[debug]       Load.apply: mkStreams took 0.002199ms
[info] loading project definition from C:\Users\35845\IdeaProjects\menus\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug]     Load.loadUnit: plugins took 973.9717ms
[debug]     Load.loadUnit: defsScala took 0.002101ms
[debug] [Loading] Scanning directory C:\Users\35845\IdeaProjects\menus
[debug]       Load.loadUnit: mkEval took 0.1641ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\35845\IdeaProjects\menus, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(List(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin))), Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin))), Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin)))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 1.2658 ms
[info] loading settings for project menus from build.sbt ...
[debug]         Load.resolveProject(menus) took 19.9384ms
[debug]       Load.loadTransitive: finalizeProject(Project(id menus, base: C:\Users\35845\IdeaProjects\menus, plugins: List(<none>))) took 21.9946ms
[debug] [Loading] Done in C:\Users\35845\IdeaProjects\menus, returning: (menus)
[debug]     Load.loadUnit: loadedProjectsRaw took 1474.290599ms
[debug]     Load.loadUnit: cleanEvalClasses took 7.0409ms
[debug]   Load.loadUnit(file:/C:/Users/35845/IdeaProjects/menus/, ...) took 2455.7814ms
[debug] Load.apply: load took 2456.8623ms
[debug] Load.apply: resolveProjects took 0.0859ms
[debug] Load.apply: finalTransforms took 15.263899ms
[debug] Load.apply: config.delegates took 0.1994ms
[debug] Load.apply: Def.make(settings)... took 51.8689ms
[debug] Load.apply: structureIndex took 13.8353ms
[debug] Load.apply: mkStreams took 0.0016ms
[info] set current project to menus (in build file:/C:/Users/35845/IdeaProjects/menus/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 63285 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 63285, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to menus (in build file:/C:/Users/35845/IdeaProjects/menus/)
[debug] > Exec(idea-shell, None, None)
